# üöÄ Azure Web App Deployment Workflow
#
# This workflow automatically deploys Python applications to Azure Web App
# with comprehensive DevSecOps practices and intelligent conditional logic.
#
# üìã REQUIRED SECRETS (configure in GitHub repository settings):
# 
# Option 1 - Publish Profile (RECOMMENDED):
#   ‚Ä¢ AZURE_WEBAPP_NAME      - Name of your Azure Web App
#   ‚Ä¢ AZURE_PUBLISH_PROFILE  - Publish profile content from Azure Portal
#
# Option 2 - Service Principal (FALLBACK):
#   ‚Ä¢ AZURE_WEBAPP_NAME      - Name of your Azure Web App  
#   ‚Ä¢ AZURE_CLIENT_ID        - Service Principal App ID
#   ‚Ä¢ AZURE_TENANT_ID        - Azure AD Tenant ID
#   ‚Ä¢ AZURE_CLIENT_SECRET    - Service Principal Secret
#
# üéØ SMART FEATURES:
#   ‚úÖ Conditional dependency installation (only if requirements.txt exists)
#   ‚úÖ Conditional test execution (only if tests/ folder or test_*.py files exist)
#   ‚úÖ Build artifacts generation with metadata
#   ‚úÖ Dual deployment methods (publish-profile preferred, credentials fallback)
#   ‚úÖ SLSA provenance upload (if available)
#   ‚úÖ Comprehensive error handling and troubleshooting
#   ‚úÖ Works from scratch on any Python repository
#
# üîß SETUP INSTRUCTIONS:
#   1. Create Azure Web App in Azure Portal
#   2. Download publish profile from Azure Portal (recommended)
#      OR create Service Principal with deployment permissions
#   3. Add secrets to GitHub repository settings
#   4. Push to main branch or trigger manually
#
# üí° CUSTOMIZATION:
#   ‚Ä¢ Modify Python version in "Setup Python" step
#   ‚Ä¢ Add custom build steps before "Generate build artifacts"
#   ‚Ä¢ Customize deployment package in azure/webapps-deploy step
#   ‚Ä¢ Add environment-specific configuration

name: Deploy to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Build and Deploy to Azure
    runs-on: ubuntu-latest
    
    steps:
      # 1Ô∏è‚É£ Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # 2Ô∏è‚É£ Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      # 3Ô∏è‚É£ Instalar dependencias si existe requirements.txt
      - name: Check if requirements.txt exists
        id: check_requirements
        run: |
          if [ -f "requirements.txt" ]; then
            echo "requirements_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ requirements.txt found"
          else
            echo "requirements_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è requirements.txt not found, skipping dependency installation"
          fi
          
      - name: Install Python dependencies
        if: steps.check_requirements.outputs.requirements_exists == 'true'
        run: |
          echo "üì¶ Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Dependencies installed successfully"
          
      # 4Ô∏è‚É£ Ejecutar tests si existen
      - name: Check for tests
        id: check_tests
        run: |
          tests_found=false
          
          # Verificar si existe carpeta tests
          if [ -d "tests" ]; then
            echo "üìÅ Tests directory found"
            tests_found=true
          fi
          
          # Verificar si existen archivos test_*.py
          if find . -name "test_*.py" -type f | grep -q .; then
            echo "üìÑ Test files (test_*.py) found"
            tests_found=true
          fi
          
          if [ "$tests_found" = true ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests found, will execute them"
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No tests found, skipping test execution"
          fi
          
      - name: Run tests
        if: steps.check_tests.outputs.tests_exist == 'true'
        run: |
          echo "üß™ Running tests..."
          
          # Intentar con pytest primero
          if command -v pytest &> /dev/null; then
            echo "Running tests with pytest..."
            pytest -v || (echo "‚ùå Tests failed" && exit 1)
          # Si no est√° pytest, intentar con python -m unittest
          elif python -c "import unittest" 2>/dev/null; then
            echo "Running tests with unittest..."
            python -m unittest discover -s . -p "test_*.py" -v || (echo "‚ùå Tests failed" && exit 1)
          else
            echo "‚ö†Ô∏è No test runner available, but test files were found"
            exit 1
          fi
          
          echo "‚úÖ All tests passed successfully"
          
      # 5Ô∏è‚É£ Generar artefactos de build
      - name: Generate build artifacts
        id: build_artifacts
        run: |
          echo "üî® Generating build artifacts..."
          
          # Crear directorio de distribuci√≥n
          mkdir -p dist
          
          # Copiar archivos de la aplicaci√≥n (excluyendo archivos innecesarios)
          echo "Copying application files..."
          rsync -av --exclude='.git' --exclude='.github' --exclude='__pycache__' \
                    --exclude='*.pyc' --exclude='.pytest_cache' --exclude='node_modules' \
                    --exclude='venv' --exclude='.venv' --exclude='dist' \
                    . dist/
          
          # Crear archivo de metadatos del build
          cat > dist/build-info.json << EOF
          {
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_commit": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}",
            "workflow_run": "${{ github.run_id }}",
            "repository": "${{ github.repository }}"
          }
          EOF
          
          echo "build_path=dist" >> $GITHUB_OUTPUT
          echo "‚úÖ Build artifacts generated successfully"
          
      # 6Ô∏è‚É£ Subir artefactos como artifacts de Actions
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30
          
      # 7Ô∏è‚É£ Login seguro a Azure
      - name: Azure Login (Service Principal)
        if: env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_CLIENT_SECRET != ''
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          
      # 8Ô∏è‚É£ Desplegar a Azure Web App (m√©todo preferente: publish-profile)
      - name: Deploy to Azure Web App (Publish Profile)
        if: secrets.AZURE_PUBLISH_PROFILE != '' && secrets.AZURE_WEBAPP_NAME != ''
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: dist/
          
      # 8Ô∏è‚É£ Desplegar a Azure Web App (m√©todo alternativo: credenciales)
      - name: Deploy to Azure Web App (Service Principal)
        if: secrets.AZURE_PUBLISH_PROFILE == '' && secrets.AZURE_WEBAPP_NAME != '' && secrets.AZURE_CLIENT_ID != ''
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: dist/
          
      # 9Ô∏è‚É£ Verificar si existe SLSA provenance y subirlo
      - name: Check for SLSA provenance
        id: check_provenance
        run: |
          provenance_found=false
          provenance_file=""
          
          # Buscar archivos de procedencia comunes
          for file in "slsa-provenance.json" "provenance.json" ".slsa-provenance.json"; do
            if [ -f "$file" ]; then
              echo "üìÑ Found provenance file: $file"
              provenance_found=true
              provenance_file="$file"
              break
            fi
          done
          
          if [ "$provenance_found" = true ]; then
            echo "provenance_exists=true" >> $GITHUB_OUTPUT
            echo "provenance_file=$provenance_file" >> $GITHUB_OUTPUT
            echo "‚úÖ SLSA provenance file found: $provenance_file"
          else
            echo "provenance_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No SLSA provenance file found"
          fi
          
      - name: Upload SLSA provenance artifact
        if: steps.check_provenance.outputs.provenance_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: slsa-provenance
          path: ${{ steps.check_provenance.outputs.provenance_file }}
          retention-days: 90
          
      # üîü Resumen final del despliegue
      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìã Deployment Summary:"
          echo "  ‚Ä¢ Repository: ${{ github.repository }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Workflow Run: ${{ github.run_id }}"
          echo "  ‚Ä¢ Web App: ${{ secrets.AZURE_WEBAPP_NAME || 'Not configured' }}"
          echo ""
          
          if [ "${{ steps.check_requirements.outputs.requirements_exists }}" = "true" ]; then
            echo "  ‚úÖ Dependencies installed from requirements.txt"
          else
            echo "  ‚ÑπÔ∏è No requirements.txt found"
          fi
          
          if [ "${{ steps.check_tests.outputs.tests_exist }}" = "true" ]; then
            echo "  ‚úÖ Tests executed successfully"
          else
            echo "  ‚ÑπÔ∏è No tests found or executed"
          fi
          
          echo "  ‚úÖ Build artifacts generated and uploaded"
          
          if [ "${{ secrets.AZURE_PUBLISH_PROFILE }}" != "" ]; then
            echo "  ‚úÖ Deployed using publish profile (preferred method)"
          elif [ "${{ secrets.AZURE_CLIENT_ID }}" != "" ]; then
            echo "  ‚úÖ Deployed using service principal credentials"
          else
            echo "  ‚ö†Ô∏è No Azure credentials configured"
          fi
          
          if [ "${{ steps.check_provenance.outputs.provenance_exists }}" = "true" ]; then
            echo "  ‚úÖ SLSA provenance uploaded"
          else
            echo "  ‚ÑπÔ∏è No SLSA provenance found"
          fi
          
      # ‚ùå Manejo de errores en caso de fallo
      - name: Error Handling
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo ""
          echo "üîç Troubleshooting checklist:"
          echo "  1. Verify Azure secrets are correctly configured:"
          echo "     - AZURE_WEBAPP_NAME"
          echo "     - AZURE_PUBLISH_PROFILE (preferred) OR"
          echo "     - AZURE_CLIENT_ID + AZURE_TENANT_ID + AZURE_CLIENT_SECRET"
          echo ""
          echo "  2. Check that the Azure Web App exists and is accessible"
          echo "  3. Verify that the publish profile or service principal has deployment permissions"
          echo "  4. Check application logs for runtime errors"
          echo ""
          echo "üìä Current configuration status:"
          echo "  ‚Ä¢ AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME != '' && '‚úÖ Configured' || '‚ùå Missing' }}"
          echo "  ‚Ä¢ AZURE_PUBLISH_PROFILE: ${{ secrets.AZURE_PUBLISH_PROFILE != '' && '‚úÖ Configured' || '‚ùå Missing' }}"
          echo "  ‚Ä¢ AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID != '' && '‚úÖ Configured' || '‚ùå Missing' }}"
          echo "  ‚Ä¢ AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID != '' && '‚úÖ Configured' || '‚ùå Missing' }}"
          echo "  ‚Ä¢ AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET != '' && '‚úÖ Configured' || '‚ùå Missing' }}"
          
          exit 1