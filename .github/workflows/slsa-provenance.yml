name: Generar procedencia SLSA

on:
  push:
    branches: [ main, "fix/**" ]   # corre en main y cualquier rama fix/*
    tags:
      - "v*"
  workflow_dispatch:

# Permisos por defecto del workflow (mínimos necesarios)
permissions:
  contents: read
  id-token: write         # requerido por OIDC
  actions: read           # slsa-generator lee metadatos del run

concurrency:
  group: slsa-provenance-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build (demo) + seed subject
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Seed subject for SLSA
        run: |
          mkdir -p dist
          echo "Build $(date -Iseconds)" > dist/build.txt

      - name: Publicar artefacto de build
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/build.txt

  provenance:
    name: SLSA provenance (SLSA3)
    needs: build
    # permisos explícitos por si se refuerzan a nivel job
    permissions:
      contents: read
      id-token: write
      actions: read
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      # Forma recomendada y más simple
      subject-path: dist/build.txt
    secrets: inherit

  security_scan:
    name: Microsoft Security DevOps scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write   # para subir SARIF a la pestaña Security
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (opcional) solo si un tool requiere Python; MSDO no lo necesita normalmente
      # - name: Setup Python (3.11)
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: "3.11"

      - name: Run Microsoft Security DevOps
        id: msdo
        uses: microsoft/security-devops-action@v1.6.0
        with:
          categories: "code,secrets,iac,containers"
          policy: GitHub

      - name: Upload SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.msdo.outputs.sarifFile }}

  attest:
    name: Attestación (sólo en tags v*)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [ build, provenance ]
    permissions:
      attestations: write
      id-token: write
      contents: read
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Descargar artefacto de build
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist

      - name: Crear attestation de build
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: dist/build.txt

